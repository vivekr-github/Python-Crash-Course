

Object Oriented Programming

#create a few classes to simulate a server that's taking connections from the outside
#and then a load balancer that ensures that there are enough servers to serve those connections.

#To represent the servers that are taking care of the connections, we'll use a Server class. Each connection is
#represented by an id, that could, for example, be the IP address of the computer connecting to the server.
#For our simulation, each connection creates a random amount of load in the server, between 1 and 10.

import random

class Server:
    def __init__(self):
        """Creates a new server instance, with no active connections."""
        self.connections = {}

    def add_connection(self, connection_id):
        """Adds a new connection to this server."""
        connection_load = random.random()*10+1
        # Add the connection to the dictionary with the calculated load
        self.connections[connection_id] = connection_load

    def close_connection(self, connection_id):
        """Closes a connection on this server."""
        # Remove the connection from the dictionary
        self.connections.pop(connection_id)

    def load(self):
        """Calculates the current load for all connections."""
        total = 0
        # Add up the load for each of the connections
        for value in self.connections.values():
            total+=value
        return total

    def __str__(self):
        """Returns a string with the current load of the server"""
        return "{:.2f}%".format(self.load())

#run the following cell to create a Server instance and add a connection to it, then check the load:

server = Server()
server.add_connection("192.168.1.1")

print(server.load())
#prints 2.0733859792273237

#run the subsequent code to close the connection

server.close_connection("192.168.1.1")
print(server.load())
#prints 0 //since there are no open connections



#Creating the loadbalancer class

#This class will start with only one server available.
#When a connection gets added, it will randomly select a server to serve that connection,
#and then pass on the connection to the server. The LoadBalancing class also needs to keep
#track of the ongoing connections to be able to close them.

class LoadBalancing:
    def __init__(self):
        """Initialize the load balancing system with one server"""
        self.connections = {}
        self.servers = [Server()]

    def add_connection(self, connection_id):
        """Randomly selects a server and adds a connection to it."""
        server = random.choice(self.servers)
        # Add the connection to the dictionary with the selected server
        self.connections[connection_id] = server
        # Add the connection to the server
        server.add_connection(connection_id)
        self.ensure_availability()

    def close_connection(self, connection_id):
        """Closes the connection on the the server corresponding to connection_id."""
        # Find out the right server
        srv = self.connections[connection_id]
        # Close the connection on the server
        srv.close_connection(connection_id)
        # Remove the connection from the load balancer
        self.connections.pop(connection_id)

    def avg_load(self):
        """Calculates the average load of all servers"""
        # Sum the load of each server and divide by the amount of servers
        total = 0
        for server in self.servers:
            total+= server.load()
        avg = total/len(self.servers)
        return avg

    def ensure_availability(self):
        """If the average load is higher than 50, spin up a new server"""
        avg = self.avg_load()
        if avg > 50:
            self.servers.append(Server())


    def __str__(self):
        """Returns a string with the load for each server."""
        loads = [str(server) for server in self.servers]
        return "[{}]".format(",".join(loads))


#Execute the next set of code to add a connection and print the load

l = LoadBalancing()
l.add_connection("fdca:83d2::f20d")
print(l.avg_load())
#prints 8.426181332024655

#Add another server and print the average load

l.servers.append(Server())
print(l.avg_load())
#Prints 4.213090666012327

#The average load should now be half of what it was before.

#close the connection

l.close_connection("fdca:83d2::f20d")
print(l.avg_load())


#Simulate 20 new connections. New servers will automatically be spun up
#to ensure that average load of all servers is under 50%.

for connection in range(20):
    l.add_connection(connection)
print(l)

print(l.avg_load())
#Prints 40.35453910786052 //which is <50%


